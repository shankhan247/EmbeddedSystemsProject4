#!/usr/bin/env python

"""
This is a node that allows the turtlebot3 burger robot to explore its environment autonomously while gmapping. 
SUBSCRIBERS:
NONE
PUBLISHERS:
 + cmd_vel (geometry_msgs/Twist) ~ the velocity of the robot


THIS SCRIPT IS DERIVED FROM THE FOLLOWING SOURCE: 
https://hotblackrobotics.github.io/en/blog/2018/01/29/action-client-py/
Accessed on: 11/18/2019 
"""

import rospy

# Brings in the SimpleActionClient
import actionlib
# Brings in the .action file and messages used by the move base action
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

def auto_move():

    rospy.init_node('auto_nav') # initialize the node

   # Create an action client called "move_base" with action definition file "MoveBaseAction"
    client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
 
   # Waits until the action server has started up and started listening for goals.
    client.wait_for_server()

   # Creates a new goal with the MoveBaseGoal constructor
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
   # Move 0.5 meters forward along the x axis of the "map" coordinate frame 
    goal.target_pose.pose.position.x = 10
    goal.target_pose.pose.position.y = 5

   # No rotation of the mobile base frame w.r.t. map frame
    #goal.target_pose.pose.orientation.w = 1.0

   # Sends the goal to the action server.
    client.send_goal(goal)
   # Waits for the server to finish performing the action.
    wait = client.wait_for_result()
   # If the result doesn't arrive, assume the Server is not available
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available!")
    else:
    # Result of executing the action
        return client.get_result()   

def main():
    move = auto_move()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass